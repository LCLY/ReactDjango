{"version":3,"sources":["store/actions/auth.js","store/actions/actionTypes.js","containers/Layout.js","components/Articles.js","components/FormLayout.js","containers/ArticleListView.js","containers/ArticleDetailView.js","containers/Login.js","containers/Signup.js","routes.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","index.js"],"names":["authSuccess","token","type","authFail","error","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","Header","Layout","Content","Footer","CustomLayout","className","theme","mode","defaultSelectedKeys","style","lineHeight","this","props","isAuthenticated","Item","key","onClick","to","padding","margin","background","minHeight","children","textAlign","React","Component","withRouter","connect","actions","IconText","text","marginRight","Articles","itemLayout","size","pagination","onChange","page","console","log","pageSize","dataSource","data","renderItem","item","title","extra","width","alt","src","Meta","avatar","href","id","description","content","FormLayout","handleFormSubmit","e","requestType","articleID","preventDefault","target","elements","value","axios","post","then","res","catch","err","put","onSubmit","event","label","name","placeholder","htmlType","ArticleListView","state","articles","get","setState","btnText","ArticleDetailView","handleDelete","match","params","delete","history","push","forceUpdate","headers","FormItem","Form","antIcon","fontSize","spin","NormalLoginForm","handleSubmit","form","validateFields","values","onAuth","userName","password","errorMessage","message","getFieldDecorator","loading","indicator","rules","required","prefix","color","WrappedNormalLoginForm","create","username","expirationDate","Date","getTime","setItem","RegistrationForm","confirmDirty","validateFieldsAndScroll","email","confirm","handleConfirmBlur","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","getItem","validator","Password","onBlur","WrappedRegistrationForm","password1","password2","BaseRouter","exact","path","component","Login","Signup","App","onTryAutoSignup","undefined","Boolean","window","location","hostname","updateObject","oldObject","updatedProperties","initialState","authStart","action","authLogout","reducer","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2975c0e0.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\r\nimport axios from \"axios\";\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START,\r\n    };\r\n};\r\n\r\nexport const authSuccess = token => {\r\n    return {\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        token: token,\r\n    };\r\n};\r\n\r\nexport const authFail = error => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error,\r\n    };\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationDate\");\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT,\r\n    };\r\n};\r\n\r\nexport const checkAuthTimeout = expirationTime => {\r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout());\r\n        }, expirationTime * 1000);\r\n    };\r\n};\r\n\r\nexport const authLogin = (username, password) => {\r\n    // dispatch - call to action, return a dispatch of auth start method, let us know that auth start has taken place\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        axios\r\n            .post(\"http://127.0.0.1:8000/rest-auth/login/\", {\r\n                username: username,\r\n                password: password,\r\n            })\r\n            .then(res => {\r\n                // we will get a generated key from django framework\r\n                const token = res.data.key;\r\n                const expirationDate = new Date(\r\n                    new Date().getTime() + 3600 * 1000,\r\n                );\r\n                localStorage.setItem(\"token\", token);\r\n                localStorage.setItem(\"expirationDate\", expirationDate);\r\n                dispatch(authSuccess(token));\r\n                // once login successful, check the time\r\n                dispatch(checkAuthTimeout(3600));\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err));\r\n            });\r\n    };\r\n};\r\n\r\nexport const authSignup = (username, email, password1, password2) => {\r\n    // dispatch - call to action, return a dispatch of auth start method, let us know that auth start has taken place\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        axios\r\n            .post(\"http://127.0.0.1:8000/rest-auth/registration/\", {\r\n                username: username,\r\n                email: email,\r\n                password1: password1,\r\n                password2: password2,\r\n            })\r\n            .then(res => {\r\n                // we will get a generated key from django framework\r\n                const token = res.data.key;\r\n                const expirationDate = new Date(\r\n                    new Date().getTime() + 3600 * 1000,\r\n                );\r\n                localStorage.setItem(\"token\", token);\r\n                localStorage.setItem(\"expirationDate\", expirationDate);\r\n                dispatch(authSuccess(token));\r\n                // once login successful, check the time\r\n                dispatch(checkAuthTimeout(3600));\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err));\r\n            });\r\n    };\r\n};\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token === undefined) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(\r\n                localStorage.getItem(\"expirationDate\"),\r\n            );\r\n            // if its old, logout\r\n            if (expirationDate <= new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                dispatch(authSuccess(token));\r\n                dispatch(\r\n                    checkAuthTimeout(\r\n                        (expirationDate.getTime() - new Date().getTime()) /\r\n                            1000,\r\n                    ),\r\n                );\r\n            }\r\n        }\r\n    };\r\n};\r\n","export const AUTH_START = \"AUTH_START\";\r\nexport const AUTH_SUCCESS = \"AUTH_SUCCESS\";\r\nexport const AUTH_FAIL = \"AUTH_FAIL\";\r\nexport const AUTH_LOGOUT = \"AUTH_LOGOUT\";\r\n","import React from \"react\";\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport * as actions from \"../store/actions/auth\";\r\nimport { connect } from \"react-redux\";\r\nconst { Header, Content, Footer } = Layout;\r\nclass CustomLayout extends React.Component {\r\n    render() {\r\n        return (\r\n            <Layout className=\"layout\">\r\n                <Header>\r\n                    <div className=\"logo\" />\r\n                    <Menu\r\n                        theme=\"dark\"\r\n                        mode=\"horizontal\"\r\n                        defaultSelectedKeys={[\"2\"]}\r\n                        style={{ lineHeight: \"64px\" }}\r\n                    >\r\n                        {this.props.isAuthenticated ? (\r\n                            <Menu.Item key=\"2\" onClick={this.props.logout}>\r\n                                <Link to=\"/login\">Logout</Link>\r\n                            </Menu.Item>\r\n                        ) : (\r\n                            <Menu.Item key=\"2\">\r\n                                <Link to=\"/Login\">Login</Link>\r\n                            </Menu.Item>\r\n                        )}\r\n                        {this.props.isAuthenticated ? (\r\n                            <Menu.Item key=\"1\">\r\n                                <Link to=\"/\">Posts</Link>\r\n                            </Menu.Item>\r\n                        ) : (\r\n                            \"\"\r\n                        )}\r\n                    </Menu>\r\n                </Header>\r\n                <Content style={{ padding: \"0 50px\" }}>\r\n                    <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n                        <Breadcrumb.Item>\r\n                            <Link to=\"/\">Home</Link>\r\n                        </Breadcrumb.Item>\r\n                        <Breadcrumb.Item>\r\n                            <Link to=\"/\">List</Link>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <div\r\n                        style={{\r\n                            background: \"#fff\",\r\n                            padding: 24,\r\n                            minHeight: 280,\r\n                        }}\r\n                    >\r\n                        {/* will print out whatever is wrapped in <CustomLayout> props.children </CustomLayout> */}\r\n                        {this.props.children}\r\n                    </div>\r\n                </Content>\r\n                <Footer style={{ textAlign: \"center\" }}>\r\n                    Ant Design ©2018 Created by Ant UED\r\n                </Footer>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        logout: () => dispatch(actions.logout()),\r\n    };\r\n};\r\n// withRouter is to fix some issue with the Link to=\"\"\r\nexport default withRouter(\r\n    connect(\r\n        null,\r\n        mapDispatchToProps,\r\n    )(CustomLayout),\r\n);\r\n","import React from \"react\";\r\nimport { List, Avatar, Icon } from \"antd\";\r\n\r\nconst IconText = ({ type, text }) => (\r\n    <span>\r\n        <Icon type={type} style={{ marginRight: 8 }} />\r\n        {text}\r\n    </span>\r\n);\r\nconst Articles = props => {\r\n    return (\r\n        <List\r\n            itemLayout=\"vertical\"\r\n            size=\"large\"\r\n            pagination={{\r\n                onChange: page => {\r\n                    console.log(page);\r\n                },\r\n                pageSize: 3,\r\n            }}\r\n            dataSource={props.data}\r\n            renderItem={item => (\r\n                <List.Item\r\n                    key={item.title}\r\n                    actions={[\r\n                        <IconText\r\n                            type=\"star-o\"\r\n                            text=\"156\"\r\n                            key=\"list-vertical-star-o\"\r\n                        />,\r\n                        <IconText\r\n                            type=\"like-o\"\r\n                            text=\"156\"\r\n                            key=\"list-vertical-like-o\"\r\n                        />,\r\n                        <IconText\r\n                            type=\"message\"\r\n                            text=\"2\"\r\n                            key=\"list-vertical-message\"\r\n                        />,\r\n                    ]}\r\n                    extra={\r\n                        <img\r\n                            width={272}\r\n                            alt=\"logo\"\r\n                            src=\"https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png\"\r\n                        />\r\n                    }\r\n                >\r\n                    <List.Item.Meta\r\n                        avatar={<Avatar src={item.avatar} />}\r\n                        title={<a href={`/${item.id}`}>{item.title}</a>}\r\n                        description={item.description}\r\n                    />\r\n                    {item.content}\r\n                </List.Item>\r\n            )}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Articles;\r\n","import React from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport axios from \"axios\";\r\nclass FormLayout extends React.Component {\r\n    handleFormSubmit = (e, requestType, articleID) => {\r\n        e.preventDefault(); //prevent page reload\r\n        const title = e.target.elements.title.value;\r\n        const content = e.target.elements.content.value;\r\n\r\n        switch (requestType) {\r\n            case \"post\":\r\n                return axios\r\n                    .post(\"http://127.0.0.1:8000/api/\", {\r\n                        title: title,\r\n                        content: content,\r\n                    })\r\n                    .then(res => console.log(res))\r\n                    .catch(err => console.log(err));\r\n            case \"put\":\r\n                return axios\r\n                    .put(`http://127.0.0.1:8000/api/${articleID}/`, {\r\n                        title: title,\r\n                        content: content,\r\n                    })\r\n                    .then(res => console.log(res))\r\n                    .catch(err => console.log(err));\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form\r\n                    onSubmit={event =>\r\n                        this.handleFormSubmit(\r\n                            event,\r\n                            this.props.requestType,\r\n                            this.props.articleID,\r\n                        )\r\n                    }\r\n                >\r\n                    <Form.Item label=\"Title\">\r\n                        {/* we need the name of the input so we can get the value in it */}\r\n                        <Input name=\"title\" placeholder=\"Enter a title\" />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Content\">\r\n                        <Input\r\n                            name=\"content\"\r\n                            placeholder=\"Enter some content\"\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormLayout;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Articles from \"../components/Articles\";\r\nimport FormLayout from \"../components/FormLayout\";\r\nclass ArticleListView extends Component {\r\n    state = {\r\n        articles: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        // when component is rendered, get data and update state\r\n        axios.get(\"http://127.0.0.1:8000/api/\").then(res => {\r\n            this.setState({ articles: res.data });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Articles data={this.state.articles} />\r\n                <br />\r\n                <h2>Create an article</h2>\r\n                <FormLayout\r\n                    requestType=\"post\"\r\n                    articleID={null}\r\n                    btnText=\"Create\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArticleListView;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Card, Button } from \"antd\";\r\nimport FormLayout from \"../components/FormLayout\";\r\nclass ArticleDetailView extends Component {\r\n    state = {\r\n        articles: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        // this is the router path\r\n        const articleID = this.props.match.params.articleID;\r\n        // when component is rendered, get data and update state\r\n        // get article from database\r\n        var config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n        };\r\n\r\n        axios\r\n            .get(`http://127.0.0.1:8000/api/${articleID}`, config)\r\n            .then(res => {\r\n                this.setState({ articles: res.data });\r\n            })\r\n            .catch(error => console.log(error));\r\n    }\r\n\r\n    handleDelete = e => {\r\n        const articleID = this.props.match.params.articleID;\r\n        axios.delete(`http://127.0.0.1:8000/api/${articleID}`);\r\n        this.props.history.push(\"/\"); //redirect us back to root\r\n        this.forceUpdate(); //brute force way to force the page refresh\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card title={this.state.articles.title}>\r\n                    <p>{this.state.articles.content}</p>\r\n                </Card>\r\n                <FormLayout\r\n                    requestType=\"put\"\r\n                    articleID={this.props.match.params.articleID}\r\n                    btnText=\"Update\"\r\n                />\r\n                <form onSubmit={this.handleDelete}>\r\n                    <Button htmlType=\"submit\" type=\"danger\">\r\n                        Delete\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArticleDetailView;\r\n\r\n// basically what happened is when the component is rendered, we get the data from the article models through axios and the router id\r\n","import React from \"react\";\r\nimport { Form, Icon, Input, Button, Spin } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as actions from \"../store/actions/auth\";\r\n\r\nconst FormItem = Form.Item;\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\n\r\nclass NormalLoginForm extends React.Component {\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                this.props.onAuth(values.userName, values.password);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.props.token !== null) {\r\n            console.log(\"Token has been generated\");\r\n            this.props.history.push(\"/\");\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p>{this.props.error.message}</p>;\r\n        }\r\n\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div>\r\n                {errorMessage}\r\n                {this.props.loading ? (\r\n                    <Spin indicator={antIcon} />\r\n                ) : (\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <FormItem>\r\n                            {getFieldDecorator(\"userName\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your username!\",\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Username\"\r\n                                />,\r\n                            )}\r\n                        </FormItem>\r\n\r\n                        <FormItem>\r\n                            {getFieldDecorator(\"password\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your Password!\",\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />,\r\n                            )}\r\n                        </FormItem>\r\n\r\n                        <FormItem>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ marginRight: \"10px\" }}\r\n                            >\r\n                                Login\r\n                            </Button>\r\n                            Or\r\n                            <NavLink\r\n                                style={{ marginRight: \"10px\" }}\r\n                                to=\"/signup/\"\r\n                            >\r\n                                &nbsp;&nbsp;Sign Up\r\n                            </NavLink>\r\n                        </FormItem>\r\n                    </Form>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst WrappedNormalLoginForm = Form.create()(NormalLoginForm);\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.token,\r\n        loading: state.loading,\r\n        error: state.error,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, password) => {\r\n            dispatch(actions.authLogin(username, password));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(WrappedNormalLoginForm);\r\n","import React from \"react\";\r\nimport { Button, Form, Input, Icon, Spin } from \"antd\";\r\nimport * as actions from \"../store/actions/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                this.props.onAuth(\r\n                    values.username,\r\n                    values.email,\r\n                    values.password,\r\n                    values.confirm,\r\n                );\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue(\"password\")) {\r\n            callback(\"Two passwords that you enter is inconsistent!\");\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields([\"confirm\"], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p>{this.props.error.message}</p>;\r\n        }\r\n\r\n        if (localStorage.getItem(\"token\") !== null) {\r\n            console.log(\"Sign up successfully, token has been generated\");\r\n            this.props.history.push(\"/\");\r\n        }\r\n        return (\r\n            <div>\r\n                {errorMessage}\r\n                {this.props.loading ? (\r\n                    <Spin indicator={antIcon} />\r\n                ) : (\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"username\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your username!\",\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Username\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"email\", {\r\n                                rules: [\r\n                                    {\r\n                                        type: \"email\",\r\n                                        message:\r\n                                            \"The input is not valid E-mail!\",\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your E-mail!\",\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"mail\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Email\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"password\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your password!\",\r\n                                    },\r\n                                    {\r\n                                        validator: this.validateToNextPassword,\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input.Password\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"confirm\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message:\r\n                                            \"Please confirm your password!\",\r\n                                    },\r\n                                    {\r\n                                        validator: this.compareToFirstPassword,\r\n                                    },\r\n                                ],\r\n                            })(\r\n                                <Input.Password\r\n                                    onBlur={this.handleConfirmBlur}\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    type=\"password\"\r\n                                    placeholder=\"Confirm password\"\r\n                                />,\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                style={{ marginRight: \"10px\" }}\r\n                            >\r\n                                Sign up\r\n                            </Button>\r\n                            Or\r\n                            <NavLink\r\n                                style={{ marginRight: \"10px\" }}\r\n                                to=\"/login/\"\r\n                            >\r\n                                &nbsp;&nbsp;Login\r\n                            </NavLink>\r\n                        </Form.Item>\r\n                    </Form>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst WrappedRegistrationForm = Form.create({ name: \"register\" })(\r\n    RegistrationForm,\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (username, email, password1, password2) =>\r\n            dispatch(actions.authSignup(username, email, password1, password2)),\r\n    };\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(WrappedRegistrationForm);\r\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport ArticleListView from \"./containers/ArticleListView\";\r\nimport ArticleDetailView from \"./containers/ArticleDetailView\";\r\nimport Login from \"./containers/Login\";\r\nimport Signup from \"./containers/Signup\";\r\nconst BaseRouter = () => {\r\n    return (\r\n        <div>\r\n            {/* list */}\r\n            <Route exact path=\"/\" component={ArticleListView} />\r\n            {/* detail */}\r\n            {/* now it will only show respective article detail according to the id */}\r\n            <Route\r\n                exact\r\n                path=\"/articles/:articleID/\"\r\n                component={ArticleDetailView}\r\n            />\r\n            <Route exact path=\"/login/\" component={Login} />\r\n            <Route exact path=\"/signup/\" component={Signup} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BaseRouter;\r\n","import React, { Component } from \"react\";\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\nimport CustomLayout from \"./containers/Layout\";\nimport BaseRouter from \"./routes\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./store/actions/auth\";\nclass App extends Component {\n    // everytime component renders, it will call the function\n    componentDidMount() {\n        this.props.onTryAutoSignup();\n    }\n\n    render() {\n        return (\n            <div>\n                <Router>\n                    {/* this will pass the isAuthenticated to customlayout and dont have to setup redux in that component */}\n                    <CustomLayout {...this.props}>\n                        <BaseRouter />\n                    </CustomLayout>\n                </Router>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        // if token is null isAuthenticated will be false\n        isAuthenticated: state.token !== null,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        // and then it will dispatch this action\n        onTryAutoSignup: () => dispatch(actions.authCheckState()),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties,\r\n    };\r\n};\r\n","import * as actionTypes from \"../actions/actionTypes\";\r\nimport { updateObject } from \"../utility\";\r\n\r\nconst initialState = {\r\n    token: null,\r\n    error: null,\r\n    loading: false,\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, {\r\n        error: null,\r\n        loading: true,\r\n    });\r\n};\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.token,\r\n        error: null,\r\n        loading: false,\r\n    });\r\n};\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false,\r\n    });\r\n};\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {\r\n        token: null,\r\n    });\r\n};\r\n\r\n// when actions are dispatched, reducers received the actions, determine the type of actions and execute depending on the type\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START:\r\n            return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS:\r\n            return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL:\r\n            return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT:\r\n            return authLogout(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\n\nimport reducer from \"./store/reducers/auth\";\n\nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhances(applyMiddleware(thunk)));\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}